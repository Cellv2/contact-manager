{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/PageNotFound.js","components/test/test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","delete","t0","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","Link","to","marginRight","Contacts","Fragment","contacts_Contact","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","defaultProps","AddContact","errors","defineProperty","target","onSubmit","_this$state","newContact","preventDefault","abrupt","post","history","push","_x","_x2","_this$state2","layout_TextInputGroup","EditContact","updateContact","match","params","put","_callee2","_context2","Header","branding","exact","About","PageNotFound","Test","title","body","fetch","then","response","json","App","context_Provider","BrowserRouter","basename","process","layout_Header","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4961a35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    //action is an object with a string on what it does\r\n    switch (action.type) {\r\n        case \"DELETE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(\r\n                    contact => contact.id !== action.payload\r\n                )\r\n            };\r\n        case \"ADD_CONTACT\":\r\n            return {\r\n                ...state, //gets initial state\r\n                contacts: [action.payload, ...state.contacts] //adds new contact at the front of the array\r\n            };\r\n        case \"UPDATE_CONTACT\":\r\n            return {\r\n                ...state, //gets initial state\r\n                contacts: state.contacts.map(\r\n                    contact =>\r\n                        contact.id === action.payload.id //if the contact ID is the same as the payload ID. .id comes from JSONplaceholder automatically\r\n                            ? (contact = action.payload) //set the contacts state data to be the data in the payload (from axios)\r\n                            : contact //else just return the existing contact\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action));\r\n        }\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get(\r\n            \"https://jsonplaceholder.typicode.com/users\"\r\n        );\r\n        this.setState({ contacts: res.data });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // the whole state is being passed into 'value'\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../../context\";\r\nimport axios from \"axios\";\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onShowClick = e => {\r\n        this.setState({\r\n            showContactInfo: !this.state.showContactInfo\r\n        });\r\n    };\r\n\r\n    //if you use async with an arrow function, the async must be before the params, else you will get an error\r\n    //async onDeleteClick = (id, dispatch) => {\r\n    onDeleteClick = async (id, dispatch) => {\r\n        //NOTE:try/catch is only here to make this application work\r\n        //as we are using JSONplaceholder, new contacts will not actually get added to their DB\r\n        //this means that we can't delete anything from the DOM, either, as the DELETE request fails. The try/catch solves this\r\n        try {\r\n            //no need to assign to var, response is just an empty object for deletion\r\n            await axios.delete(\r\n                `https://jsonplaceholder.typicode.com/users/${id}`\r\n            ); //template literal to allow id of user\r\n            dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n        } catch (exception) {\r\n            dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}{\" \"}\r\n                                <i\r\n                                    onClick={this.onShowClick}\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                />\r\n                                <i\r\n                                    className=\"fas fa-times\"\r\n                                    style={{\r\n                                        cursor: \"pointer\",\r\n                                        float: \"right\",\r\n                                        color: \"red\"\r\n                                    }}\r\n                                    onClick={this.onDeleteClick.bind(\r\n                                        this,\r\n                                        id,\r\n                                        dispatch\r\n                                    )}\r\n                                />\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{\r\n                                            cursor: \"pointer\",\r\n                                            float: \"right\",\r\n                                            color: \"black\",\r\n                                            marginRight: \"1rem\"\r\n                                        }}\r\n                                    />\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Email: {email}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Phone: {phone}\r\n                                    </li>\r\n                                </ul>\r\n                            ) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nexport class Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {/* 'value' is the same as the prop in the context.provider, which\r\n                passes in the entire state in the context.js file */}\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact </span>\r\n                                List\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact key={contact.id} contact={contact} />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames(\"form-control form-control-lg\", {\r\n                    \"is-invalid\": error\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: \"text\"\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n\r\nexport class AddContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {}\r\n    };\r\n\r\n    //without the onChange event handler, this would be a controlled component\r\n    //this means you wouldn't be able to update the input field by typeing as the state is set in stone\r\n    //[e.target.name] accesses the name attr of the HTML element and plugs that in as the key, so provided the name attr and state key are identical, this will work\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    //dispatch was bound into the onSubmit fn, meaning we can use it in there\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        //check for errors\r\n        //object will be blank if no errors, so error will not show\r\n        if (name === \"\") {\r\n            this.setState({ errors: { name: \"Name is required\" } });\r\n            return;\r\n        }\r\n\r\n        if (email === \"\") {\r\n            this.setState({ errors: { email: \"E-Mail is required\" } });\r\n            return;\r\n        }\r\n\r\n        if (phone === \"\") {\r\n            this.setState({ errors: { phone: \"Phone Number is required\" } });\r\n            return;\r\n        }\r\n\r\n        //ES6 syntax, if key and value are the same, you don't need to do name:name, email:email etc.\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const res = await axios.post(\r\n            \"https://jsonplaceholder.typicode.com/users\",\r\n            newContact //sends the data along with it\r\n        );\r\n        dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n        //clear state on form submit\r\n        this.setState({ name: \"\", email: \"\", phone: \"\", errors: {} });\r\n\r\n        this.props.history.push(\"/\"); //redirect to home page on push\r\n    };\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    {/* do not need to pass in type for anything other than email as text is the default for type */}\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"E-Mail\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter E-Mail\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-block btn-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n\r\nexport class EditContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params; //get the id out of the URL parameter\r\n        const res = await axios.get(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`\r\n        );\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n    //without the onChange event handler, this would be a controlled component\r\n    //this means you wouldn't be able to update the input field by typeing as the state is set in stone\r\n    //[e.target.name] accesses the name attr of the HTML element and plugs that in as the key, so provided the name attr and state key are identical, this will work\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    //dispatch was bound into the onSubmit fn, meaning we can use it in there\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        //check for errors\r\n        //object will be blank if no errors, so error will not show\r\n        if (name === \"\") {\r\n            this.setState({ errors: { name: \"Name is required\" } });\r\n            return;\r\n        }\r\n\r\n        if (email === \"\") {\r\n            this.setState({ errors: { email: \"E-Mail is required\" } });\r\n            return;\r\n        }\r\n\r\n        if (phone === \"\") {\r\n            this.setState({ errors: { phone: \"Phone Number is required\" } });\r\n            return;\r\n        }\r\n\r\n        //ES6 syntax, if key and value are the same, you don't need to do name:name, email:email etc.\r\n        const updateContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.put(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`,\r\n            updateContact //sends the data along with it\r\n        );\r\n\r\n        dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n        //clear state on form submit\r\n        this.setState({ name: \"\", email: \"\", phone: \"\", errors: {} });\r\n\r\n        this.props.history.push(\"/\"); //redirect to home page on push\r\n    };\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    {/* do not need to pass in type for anything other than email as text is the default for type */}\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"E-Mail\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter E-Mail\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-block btn-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <Link exact to=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </Link>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"></i> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\"></i> Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fas fa-question\"></i> About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n//if 'branding' isn't passed in, MyApp will be used instead\r\nHeader.defaultProps = { branding: \"MyApp\" };\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404</span> Page Not Found\r\n            </h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageNotFound;\r\n","//-----\r\n//example file with lifecycle methods\r\n//can only be used within class components - can't be used in functional components\r\n//lifecycle picture: http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\r\n//\r\n//LEGACY STUFF: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\r\n//LEGACY STUFF: https://medium.com/@baphemot/understanding-react-react-16-3-component-life-cycle-23129bc7a705\r\n//-----\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport class Test extends Component {\r\n    state = {\r\n        title: \"\",\r\n        body: \"\"\r\n    };\r\n\r\n    //fires whatever is in the function *after* the components mounts\r\n    //normally used for things like http requests\r\n    componentDidMount() {\r\n        //simply console log it\r\n        // fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n        //     .then(response => response.json())\r\n        //     .then(data => console.log(data));\r\n\r\n        //actually add it to state\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    title: data.title,\r\n                    body: data.body\r\n                });\r\n            });\r\n    }\r\n\r\n    // /* LEGACY - DON'T USE */\r\n    // //fires whatever is in the function right *before* the component mounts\r\n    // componentWillMount() {\r\n    //     console.log(\"componentWillMount\");\r\n    // }\r\n\r\n    // //fires only when the component is updated (such as state changed)\r\n    // componentDidUpdate() {\r\n    //     console.log(\"componentDidUpdate\");\r\n    // }\r\n\r\n    // /* LEGACY - DON'T USE */\r\n    // //fires only when the component is updated (such as state changed)\r\n    // componentWillUpdate() {\r\n    //     console.log(\"componentWillUpdate\");\r\n    // }\r\n\r\n    // /* LEGACY - DON'T USE */\r\n    // //would be used if you're storing state somehow (for example, with redux) and want to have the next set of props/state\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log(\"componentWillReceiveProps\");\r\n    // }\r\n\r\n    // state = { test: \"test\" };\r\n    // //basically a replacement for 'componentWillReceiveProps'\r\n    // //must return either some state or null\r\n    // static getDerivedStateFromProps(nextProps, prevState) {\r\n    //     return { test: \"something\" };\r\n    //     return null;\r\n    // }\r\n\r\n    // //basically a replacement for 'componentWillReceiveProps'\r\n    // //fires before mutations are make (the DOM is updated)\r\n    // getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    //     console.log(\"getSnapshotBeforeUpdate\");\r\n    // }\r\n\r\n    render() {\r\n        const { title, body } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Contacts from \"./components/contacts/Contacts.js\";\nimport AddContact from \"./components/contacts/AddContact.js\";\nimport EditContact from \"./components/contacts/EditContact.js\";\nimport Header from \"./components/layout/Header.js\";\nimport About from \"./components/pages/About\";\nimport PageNotFound from \"./components/pages/PageNotFound\";\nimport Test from \"./components/test/test\";\n\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider>\n                <Router basename={process.env.PUBLIC_URL}>\n                    <div className=\"App\">\n                        <Header branding=\"Contact Manager\" />\n                        <div className=\"conatiner\">\n                            <Switch>\n                                <Route exact path=\"/\" component={Contacts} />\n                                <Route\n                                    exact\n                                    path=\"/contact/add\"\n                                    component={AddContact}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/contact/edit/:id\"\n                                    component={EditContact}\n                                />\n                                <Route exact path=\"/about\" component={About} />\n                                <Route exact path=\"/test\" component={Test} />\n                                <Route component={PageNotFound} />\n                            </Switch>\n                        </div>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}